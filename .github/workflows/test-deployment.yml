name: Verify that the  current chart can be deployed locally on minikube

env:
  HELM_VERSION: 3.7.0
  IMAGE_REGISTRY: operatorservice.azurecr.io
  OP_CHART_DIRECTORY: ./chart/op-svc-jenkins # should match repo's directory structure
  CRS_CHART_DIRECTORY: ./chart/op-svc-jenkins-crs # should match repo's directory structure
  OPERATOR_NAMESPACE: operator
  JENKINS_NAMESPACE: jenkins # should match 'jenkinsNamespace' field value in operator-service values.yaml

#on:
#  push:
#    branches:
#      - main
#  pull_request:

on:
  push:
    branches:
      - chore/sc-451-helm-chart-tests-on-pr

jobs:
    verify-that-chart-can-be-deployed:
      name: test that current chart can be deployed locally on minikube
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v2
          with:
            fetch-depth: 0
          name: checkout repo

        - name: Install helm
          run: |
            make helm-install HELM_VERSION=$HELM_VERSION

        - name: Prepare and start a local Minikube cluster
          run: |
            sudo apt-get update
            sudo apt-get install socat
            sudo mkdir -p $HOME/.kube $HOME/.minikube
            sudo chown -R $USER $HOME/.kube $HOME/.minikube
            make minikube-start MINIKUBE_DRIVER='docker' MEMORY_AMOUNT=4096 CPUS_NUMBER=2

        - name: Create namespaces for Jenkins and Operator
          run: |
            kubectl create ns $JENKINS_NAMESPACE
            kubectl create ns $OPERATOR_NAMESPACE

        - name: Create secret with data for accessing the image registry
          run: |
            kubectl create secret docker-registry token \
            --namespace $OPERATOR_NAMESPACE \
            --docker-server=$IMAGE_REGISTRY \
            --docker-username=${{ secrets.DEPLOYMENT_TEST_WORKFLOW_CUSTOMER_NAME }} \
            --docker-password=${{ secrets.DEPLOYMENT_TEST_WORKFLOW_ACR_PASSWORD }}

        - name: Create license secret
          run: |
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Secret
            metadata:
              name: license
              namespace: $OPERATOR_NAMESPACE
            stringData:
              clientName: ${{ secrets.DEPLOYMENT_TEST_WORKFLOW_CUSTOMER_NAME }}
              licenseKey: ${{ secrets.DEPLOYMENT_TEST_WORKFLOW_LICENSE_SECRET_KEY }}
            EOF

        - name: Install operator-service chart
          run: |
            helm install operator-service $OP_CHART_DIRECTORY -f $OP_CHART_DIRECTORY/values.yaml -n $OPERATOR_NAMESPACE

        - name: Verify that Operator is up and running
          timeout-minutes: 3
          run: |
            sleep 15

            PHASE=NotRunning
            while [[ $PHASE != Running ]]; do
              sleep 2

              PHASE=$(kubectl get pod -n $OPERATOR_NAMESPACE -l app.kubernetes.io/name=op-svc-jenkins -o jsonpath="{.items[0].status.phase}")

              echo "Operator pod phase: $PHASE"
            done

            echo "Operator should be fully up and running! Here are the logs:"
            kubectl logs -n operator -l app.kubernetes.io/name=op-svc-jenkins


        - name: Install crs chart
          run: |
            helm install operator-service-crs $CRS_CHART_DIRECTORY -f $CRS_CHART_DIRECTORY/values.yaml -n $JENKINS_NAMESPACE


        - name: Verify that Jenkins is running and ready
          timeout-minutes: 5
          run: |
            PHASE=NotRunning
            READY=false

            while [[ $PHASE != Running ]] || [[ $READY != true ]]; do
              sleep 2

              NO_RESOURCES_FOUND_ERROR=$(kubectl get pods -n $JENKINS_NAMESPACE 2>&1 | grep -c "No resources found")
              echo "$NO_RESOURCES_FOUND_ERROR"
              kubectl get pods -n $JENKINS_NAMESPACE 2>&1 | grep "No resources found"

              if [ $NO_RESOURCES_FOUND_ERROR -eq 0 ]
              then
                PHASE=$(kubectl get pod -n $JENKINS_NAMESPACE -l operator-service.com/kind=Jenkins -o jsonpath="{.items[0].status.phase}")
                READY=$(kubectl get pod -n $JENKINS_NAMESPACE -l operator-service.com/kind=Jenkins -o jsonpath="{.items[0].status.containerStatuses[0].ready}")

                echo "Jenkins pod phase: $PHASE"
                echo "Jenkins is ready: $READY"
              fi
            done

            echo "Jenkins should be fully up and running! Here are the logs:"
            kubectl logs -n $JENKINS_NAMESPACE -l operator-service.com/kind=Jenkins